version: "3.8"
services:
  neo:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./neo/data:/data
      - ./neo/log:/log
      - ./neo/import:/var/lib/neo4j/import
      - ./neo/plugins:/plugins
    environment:
      - NEO4J_AUTH=${NEO_USER}/${NEO_PASSWORD}
    container_name: neo-agora
    networks:
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.neo.rule=Host(`neo.${HOST}`)"
      - "traefik.tcp.services.neo.loadbalancer.server.port=7474"
      - "traefik.http.routers.neo.entrypoints=websecure"
  node:
    build: ./docker/node_api
    volumes:
      - ./node:/src
    tty: true
    networks:
      - web
    ports:
      - "8000:8000"
    container_name: api-agora
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.node.rule=Host(`api.${HOST}`)"
        #- "traefik.http.routers.node.service=node"
      - "traefik.http.routers.node.entrypoints=websecure"
      - "traefik.tcp.services.node.loadbalancer.server.port=8000"

    depends_on:
      - elastic
      - neo
    working_dir: /src
  socket:
    build: ./docker/socket
    volumes:
      - ./node:/src
    tty: true
    networks:
      - web
    ports:
      - ":8081"
    container_name: socket-agora
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.socket.rule=Host(`ws.${HOST}`)"
        #- "traefik.http.routers.socket.service=socket"
      - "traefik.tcp.services.socket.loadbalancer.server.port=8081"
        #- "traefik.tcp.services.socket.loadbalancer.server.scheme=wss"
        #- "traefik.http.services.wss.loadBalancer.sticky.cookie=true"
      # - "traefik.http.routers.socket.tls=true"
      # - "traefik.http.routers.wss.tls.certresolver=default"
      - "traefik.http.routers.socket.entrypoints=websecure"
        # - "traefik.http.middlewares.socket.headers.customrequestheaders.X-Forwarded-Proto=https"
        # - "traefik.http.routers.socket.tls.certresolver=default"
    depends_on:
      - elastic
      - neo
    working_dir: /src

  node_cdn:
    build: ./docker/node
    volumes:
      - ./cdn:/src
      - /../upload:/upload
    tty: true
    working_dir: /src
    container_name: cdn-agora
    networks:
      - web
    ports:
      - ":4000"
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.cdn1.rule=Host(`cdn.${HOST}`)"
      - "traefik.http.routers.cdn1.entrypoints=websecure"

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
      - xpack.ml.enabled=false
    volumes:
      - ./elastic:/usr/share/elasticsearch/data
    networks:
      - web
  nginx:
    image: nginx
    volumes:
      - ./conf.d:/etc/nginx/conf.d
      - ./build:/src
    tty: true
    working_dir: /src
    networks:
      - web
    container_name: front-agora
    ports:
      - ":80"
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.front.rule=Host(`${HOST}`)"
      - "traefik.http.routers.front.entrypoints=websecure"

  nginx_admin:
    image: nginx
    volumes:
      - ./conf.d:/etc/nginx/conf.d
      - ./admin:/src
    tty: true
    working_dir: /src
    container_name: admin-agora
    networks:
      - web
    ports:
      - ":80"
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.${HOST}`)"
      - "traefik.http.routers.admin.entrypoints=websecure"


  mercure:
    image: dunglas/mercure
    tty: true
    networks:
      - web
    container_name: mercure-agora
    volumes:
      - ./Caddyfile:/src/Caddyfile
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.mercure.rule=Host(`mercure.${HOST}`)"
      - "traefik.http.routers.mercure.entrypoints=websecure"

    command: /usr/bin/caddy run -config /src/Caddyfile
    environment:
      - PUBLISHER_JWT=${PUBLISHER_JWT}
      - SUBSCRIBER_JWT=${SUBSCRIBER_JWT}
      - PUBLISH_ORIGINS=${MERCURE_PUBLISH_ORIGINS}
      - CORS_ORIGINS=${MERCURE_ORIGINS}


networks:
  web:
    external:
      name: web


